#+TITLE: Org Mode Workflow
#+PROPERTY: header-args:emacs-lisp :tangle .emacs.d/lisp/bw-workflow.el

This file contains the description and configuration of the productivity workflow I use with Org Mode.

* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#principles][Principles]]
  - [[#dont-look-at-org-files-to-find-the-next-task-use-the-agenda-view][Don't look at Org files to find the next task, use the agenda view]]
  - [[#ensure-sufficient-metadata-on-tasks-for-effective-filtering][Ensure sufficient metadata on tasks for effective filtering]]
  - [[#keep-a-daily-log-of-work-being-done][Keep a daily log of work being done]]
- [[#file-paths][File Paths]]
- [[#workflow-states][Workflow States]]
- [[#tags][Tags]]
- [[#agendas][Agendas]]
- [[#clocking][Clocking]]
- [[#capture-templates][Capture Templates]]
- [[#old-configuration][Old Configuration]]
  - [[#general][General]]
  - [[#locations][Locations]]
  - [[#keybinds][Keybinds]]
  - [[#agenda][Agenda]]
  - [[#clock][Clock]]
  - [[#capturing][Capturing]]
  - [[#otherpackage][Other/package]]
    - [[#org-babel][org-babel]]
    - [[#org-roam][org-roam]]
    - [[#org-edna][org-edna]]
    - [[#org-protocol][org-protocol]]
    - [[#org-journal][org-journal]]
- [[#module-setup][Module Setup]]
:END:

* Principles

** Don't look at Org files to find the next task, use the agenda view
** Ensure sufficient metadata on tasks for effective filtering
** Keep a daily log of work being done

* File Paths

The location where my =Notes= folder lives changes in some cases

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t; -*-

  (setq org-directory
        (if bw/is-termux
            "~/storage/shared/Notes"
          "~/Notes"))

  ;; (setq org-agenda-files `(,org-directory))
  (defun bw/org-path (path)
    (expand-file-name path org-directory))

  (setq org-default-notes-file (bw/org-path "Inbox.org"))

  (with-eval-after-load 'org-roam
    (defun bw/org-roam-project-finalize-hook ()
      "Adds the captured project file to `org-agenda-files' if the
  capture was not aborted."
      ;; Remove the hook since it was added temporarily
      (remove-hook 'org-capture-after-finalize-hook #'bw/org-roam-project-finalize-hook)

      ;; Add project file to the agenda list if the capture was confirmed
      (unless org-note-abort
        (with-current-buffer (org-capture-get :buffer)
          (add-to-list 'org-agenda-files (buffer-file-name)))))

    (defun bw/org-roam-find-project ()
      (interactive)
      ;; Add the project file to the agenda after capture is finished
      (add-hook 'org-capture-after-finalize-hook #'bw/org-roam-project-finalize-hook)

      ;; Select a project file to open, creating it if necessary
      (org-roam-node-find
       nil
       nil
       (bw/org-roam-filter-by-tag "project")
       :templates
       '(("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
          :unnarrowed t))))

    (defun bw/org-roam-capture-inbox ()
      (interactive)
      (org-roam-capture- :node (org-roam-node-create)
                         :templates '(("i" "inbox" plain "* %?"
                                       :if-new (file+head "Inbox.org" "#+title: Inbox\n")))))

    (defun bw/org-roam-copy-todo-to-today ()
      (interactive)
      (let ((org-refile-keep t) ;; Set this to nil to delete the original!
            (org-roam-dailies-capture-templates
             '(("t" "tasks" entry "%?"
                :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n" ("Tasks")))))
            (org-after-refile-insert-hook #'save-buffer)
            today-file
            pos)
        (save-window-excursion
          (org-roam-dailies--capture (current-time) t)
          (setq today-file (buffer-file-name))
          (setq pos (point)))

        ;; Only refile if the target file is different than the current file
        (unless (equal (file-truename today-file)
                       (file-truename (buffer-file-name)))
          (org-refile nil nil (list "Tasks" today-file nil pos)))))

    ;; (add-to-list 'org-after-todo-state-change-hook
    ;;              (lambda ()
    ;;                (when (equal org-state "DONE")
    ;;                  (bw/org-roam-copy-todo-to-today))))
    )

#+end_src

* Workflow States

I try to keep my set of workflow states simple so that I can filter on them easily:

- =TODO= - A task that should be done at some point
- =NEXT= - This task should be done next (in the Getting Things Done sense)
- =BACK= - A task in the backlog to be done some day but not now
- =WAIT= - Waiting for someone else to be actionable again
- =DONE= - It's done!

I also make sure to set them up in the order I want =org-sort-entries= to sort them in when I use the =o= option upon invoking that command.

#+begin_src emacs-lisp

  (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
      (sequence "|" "WAIT(w)" "BACK(b)")))

  ;; TODO: org-todo-keyword-faces
  (setq org-todo-keyword-faces
    '(("NEXT" . (:foreground "orange red" :weight bold))
      ("WAIT" . (:foreground "HotPink2" :weight bold))
      ("BACK" . (:foreground "MediumPurple3" :weight bold))))

#+end_src

* Tags

Tags are used to filter all tasks to find anything actionable in a particular context.  I use the =@home= and =@work= tags for explicit contexts and then the rest are used for filtering tasks for agenda views.

- =followup= - Someone is waiting on me to follow up on this task, it should be prioritized above others
- =batch= - The task can be batched with others (low effort)

#+begin_src emacs-lisp

  ;; Configure common tags
  (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)
       ("@home" . ?H)
       ("@work" . ?W)
       ("batch" . ?b)
       ("followup" . ?f)))

#+end_src

* Agendas

#+begin_src emacs-lisp

  (setq org-agenda-window-setup 'current-window)
  (setq org-agenda-span 'day)
  (setq org-agenda-start-with-log-mode t)

  ;; Make done tasks show up in the agenda log
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-columns-default-format "%20CATEGORY(Category) %65ITEM(Task) %TODO %6Effort(Estim){:}  %6CLOCKSUM(Clock) %TAGS")

  (setq org-agenda-custom-commands
        `(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (tags-todo "+PRIORITY=\"A\""
                       ((org-agenda-overriding-header "High Priority")))
            (tags-todo "+followup" ((org-agenda-overriding-header "Needs Follow Up")))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Actions")
                   (org-agenda-max-todos nil)))
            (todo "TODO"
                  ((org-agenda-overriding-header "Unprocessed Inbox Tasks")
                   (org-agenda-files '(,(bw/org-path "Inbox.org")))
                   (org-agenda-text-search-extra-files nil)))))

          ("n" "Next Tasks"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))

          ;; Low-effort next actions
          ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort Tasks")
            (org-agenda-max-todos 20)
            (org-agenda-files org-agenda-files)))))

#+end_src

* Clocking

I like to use =org-timer-set-timer= to set a countdown timer for a task based on the "effort" value I set on it.  Since Org doesn't seem to automatically clock the task when I set a timer, this hook will take care of that.

#+begin_src emacs-lisp

  (add-hook 'org-timer-set-hook #'org-clock-in)

#+end_src

* Capture Templates

#+begin_src emacs-lisp

  (defun bw/get-todays-journal-file-name ()
    "Gets the journal file name for today's date"
    (interactive)
    (let* ((journal-file-name
             (expand-file-name
               (format-time-string "%Y/%Y-%2m-%B.org")
               (bw/org-path "Journal/")))
           (journal-year-dir (file-name-directory journal-file-name)))
      (if (not (file-directory-p journal-year-dir))
        (make-directory journal-year-dir))
      journal-file-name))


  (defun bw/on-org-capture ()
    ;; Don't show the confirmation header text
    (setq header-line-format nil)

    ;; Control how some buffers are handled
    (let ((template (org-capture-get :key t)))
      (pcase template
        ("jj" (delete-other-windows)))))

  (add-hook 'org-capture-mode-hook 'bw/on-org-capture)

  (setq org-capture-templates
    `(("t" "Tasks")
      ("tt" "Task" entry (file ,(bw/org-path "Inbox.org"))
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
      ("ts" "Clocked Entry Subtask" entry (clock)
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

      ("j" "Journal Entries")
      ("je" "General Entry" entry
           (file+olp+datetree ,(bw/org-path "Journal.org"))
           "\n* %<%I:%M %p> - %^{Title} \n\n%?\n\n"
           :tree-type week
           :clock-in :clock-resume
           :empty-lines 1)
      ("jt" "Task Entry" entry
           (file+olp+datetree ,(bw/org-path "Journal.org"))
           "\n* %<%I:%M %p> - Task Notes: %a\n\n%?\n\n"
           :tree-type week
           :clock-in :clock-resume
           :empty-lines 1)
      ("jj" "Journal" entry
           (file+olp+datetree ,(bw/org-path "Journal.org"))
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           :tree-type week
           :clock-in :clock-resume
           :empty-lines 1)))

#+end_src

* Old Configuration

The following blocks are being migrated over from my Org Mode configuration in [[file:Emacs.org][Emacs.org]].  I've disabled tangling for them so that they don't get written out to =workflow.el= in favor of my new configuration above.

** General
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    ;; Autosave regularly
    (add-hook 'auto-save-hook 'org-save-all-org-buffers)

    ;; Not sure -- set 't' to change status in org-todo list?
    (setq org-use-fast-todo-selection t)

    ;; Setup todo states
    ;; letter means indicator/keystroke
    ;; left/right of slash @ means take note when entering/leaving
    ;; lef/right of slash ! means record timestamp when entering/leaving state
    (setq org-todo-keywords
          (quote ((sequence "TODO(t)" "NEXT(n)" "IN_PROGRESS(i!)" "WAITING(w@)" "HOLD(h@)" "|" "DONE(d!)" "CANCELLED(c@)")
                  (sequence "REPEAT(r)" "|" "DONE(d!)"))))
    (setq org-todo-keyword-faces
          '(("TODO" . "dodger blue") ("IN_PROGRESS" . "tomato") ("REPEAT" . "turquoise") ("WAITING" . "slate blue") ("CANCELED" . "dim gray") ("DONE" . "forest green")))

    ;; Dependency enforcement
    (setq org-enforce-todo-dependencies nil)
    (setq org-enforce-todo-checkbox-dependencies t)

    ;; When hitting alt-return on a header, please create a new one without
    ;; messing up the one I'm standing on.
    (setq org-insert-heading-respect-content t)

    ;; Keep the indentation well structured by. OMG this is a must have. Makes
    ;; it feel less like editing a big text file and more like a purpose built
    ;; editor for org mode that forces the indentation. (Might be default in spacemacs?)
    (setq org-startup-indented t)

    ;; Attachments are inherited
    (setq org-attach-use-inheritance t)

    ;; Log and clock into respective drawers
    (setq org-log-into-drawer t)

    ;; Log reschedules to drawer
    (setq org-log-reschedule (quote time))
    (setq org-log-done nil)

    ;; Don't instert blank before headings
    (setcdr (assoc 'heading org-blank-before-new-entry) nil)

    ;; Strike through done items
    (set-face-attribute 'org-headline-done nil :strike-through t)

    ;; Default priority is low
    (setq org-priority-lowest 68)
    (setq org-priority-highest 65)
    (setq org-priority-default 68)

    (setq org-tag-alist (quote ((:startgroup)
                                ("@errand" . ?e)
                                ("@office" . ?o)
                                ("@home" . ?h)
                                (:endgroup)
                                ("WORK" . ?w)
                                ("PROJECT" . ?p)
                                ("NOTE" . ?n))))
    (defun my/org-roam-copy-todo-to-today ()
      (interactive)
      (let ((org-refile-keep t) ;; Set this to nil to delete the original!
            (org-roam-dailies-capture-templates
              '(("t" "tasks" entry "%?"
                :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n" ("Tasks")))))
            (org-after-refile-insert-hook #'save-buffer)
            today-file
            pos)
        (save-window-excursion
          (org-roam-dailies--capture (current-time) t)
          (setq today-file (buffer-file-name))
          (setq pos (point)))

        ;; Only refile if the target file is different than the current file
        (unless (equal (file-truename today-file)
                      (file-truename (buffer-file-name)))
          (org-refile nil nil (list "Tasks" today-file nil pos)))))

    (add-to-list 'org-after-todo-state-change-hook
                (lambda ()
                  (when (equal org-state "DONE")
                    (my/org-roam-copy-todo-to-today))))

    )
#+END_SRC
** Locations
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    ;; Set dir/file defaults
    (setq org-directory "~/Dropbox/org/zettelkasten")
    (setq org-default-notes-file (concat org-directory "/inbox.org"))

    ;; Use org-roam files for todos
    (defun my/org-roam-filter-by-tag (tag-name)
      (lambda (node)
        (member tag-name (org-roam-node-tags node))))

    (defun my/org-roam-list-notes-by-tag (tag-name)
      (mapcar #'org-roam-node-file
              (seq-filter
              (my/org-roam-filter-by-tag tag-name)
              (org-roam-node-list))))

    (defun my/org-roam-refresh-agenda-list ()
      (interactive)
      (setq org-agenda-files (my/org-roam-list-notes-by-tag "Agenda")))

    ;; Build the agenda list the first time for the session
    (my/org-roam-refresh-agenda-list)

    ;; Enable org-refile accross files
    (setq org-refile-targets
          '((nil :maxlevel . 3)
            (org-agenda-files :maxlevel . 1))))
#+END_SRC
** Keybinds
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (spacemacs/set-leader-keys-for-major-mode 'org-mode "oCs" 'bh/punch-in)
    (spacemacs/set-leader-keys-for-major-mode 'org-mode "oCx" 'bh/punch-out)
    (spacemacs/set-leader-keys-for-major-mode 'org-mode "oCv" 'org-columns)
    )
#+END_SRC
** Agenda
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    ;; Overwrite the current window with the agenda
    (setq org-agenda-window-setup 'current-window)

    ;; Default to day view
    (setq org-agenda-span 'day)

    ;; Set agenda view formatting
    (setq org-agenda-breadcrumbs-separator "/")
    (setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s %b")
                                     (timeline . "  % s")
                                     (todo . " %i %-12:c %b")
                                     (tags . " %i %-12:c %b")
                                     (search . " %i %-12:c")))

    ;; Default to follow mode in agenda view
    (setq org-agenda-start-with-follow-mode t)

    ;; Habit options
    (setq org-habit-graph-column 83)
    (setq org-habit-show-habits-only-for-today t)
    (setq org-habit-preceding-days 30)
    (setq org-habit-following-days 3)

    ;; Don't alter foreground for blocked items in agenda
    (set-face-foreground 'org-agenda-dimmed-todo-face nil)

    ;; Start week on Sunday
    (setq org-agenda-start-on-weekday 7)

    ;; Super agenda
    (org-super-agenda-mode)
    (setq org-super-agenda-groups
          '( ;; Each group has an implicit boolean OR operator between its selectors.
            (:name "Today"          ; Optionally specify section name
                   :time-grid t     ; Items that appear on the time grid
                   :order 0)
            (:name "Top Priority" :priority>= "C" :order 1)
            (:name "Work" :category "work" :order 2)
            (:name "Habits" :habit t :order 10)
            (:auto-category t :order 2)
            ))
    ;; Fix for issue with key mapping interaction. See: https://github.com/alphapapa/org-super-agenda/issues/50
    (setq org-super-agenda-header-map (make-sparse-keymap))
    (setq org-stuck-projects
          '("+PROJECT/-DONE" ("NEXT" ) ))
    )
#+END_SRC
** Clock
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (require 'org-clock)
    (setq org-clock-into-drawer "CLOCKING")

    (setq org-clock-total-time-cell-format "%s")
    (setq org-duration-format 'h:mm)
    (setq org-clock-report-include-clocking-task t)
    (setq org-clock-out-remove-zero-time-clocks t)

    ;; Set state on clock-in/out
    (setq org-clock-in-switch-to-state "IN_PROGRESS")
    (setq org-clock-out-switch-to-state "TODO")
    (setq org-clock-out-when-done t)

    (setq org-clock-persist 'history)
    (org-clock-persistence-insinuate)

    (setq bh/keep-clock-running nil)

    (defun bh/find-project-task ()
      "Move point to the parent (project) task if any"
      (save-restriction
        (widen)
        (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
          (while (org-up-heading-safe)
            (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
              (setq parent-task (point))))
          (goto-char parent-task)
          parent-task)))

    (defun bh/punch-in (arg)
      "Start continuous clocking and set the default task to the
  selected task.  If no task is selected set the Organization task
  as the default task."
      (interactive "p")
      (setq bh/keep-clock-running t)
      (if (equal major-mode 'org-agenda-mode)
          ;;
          ;; We're in the agenda
          ;;
          (let* ((marker (org-get-at-bol 'org-hd-marker))
                 (tags (org-with-point-at marker (org-get-tags-at))))
            (if (and (eq arg 4) tags)
                (org-agenda-clock-in '(16))
              (bh/clock-in-organization-task-as-default)))
        ;;
        ;; We are not in the agenda
        ;;
        (save-restriction
          (widen)
                                          ; Find the tags on the current task
          (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
              (org-clock-in '(16))
            (bh/clock-in-organization-task-as-default)))))

    (defun bh/punch-out ()
      (interactive)
      (setq bh/keep-clock-running nil)
      (when (org-clock-is-active)
        (org-clock-out))
      (org-agenda-remove-restriction-lock))

    (defun bh/clock-in-default-task ()
      (save-excursion
        (org-with-point-at org-clock-default-task
          (org-clock-in))))

    (defun bh/clock-in-parent-task ()
      "Move point to the parent (project) task if any and clock in"
      (let ((parent-task))
        (save-excursion
          (save-restriction
            (widen)
            (while (and (not parent-task) (org-up-heading-safe))
              (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
                (setq parent-task (point))))
            (if parent-task
                (org-with-point-at parent-task
                  (org-clock-in))
              (when bh/keep-clock-running
                (bh/clock-in-default-task)))))))

    (defvar bh/organization-task-id "498085c5-4f62-4774-b09c-4d7ba8bb5d3a")

    (defun bh/clock-in-organization-task-as-default ()
      (interactive)
      (org-with-point-at (org-id-find bh/organization-task-id 'marker)
        (org-clock-in '(16))))

    (defun bh/clock-out-maybe ()
      (when (and bh/keep-clock-running
                 (not org-clock-clocking-in)
                 (marker-buffer org-clock-default-task)
                 (not org-clock-resolving-clocks-due-to-idleness))
        (bh/clock-in-parent-task)))

    (add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

    ; Set default column view headings: Task Effort Clock_Summary
    (setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")
    (setq org-global-properties (quote (("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
                                    ("STYLE_ALL" . "habit"))))
    )
#+END_SRC
** Capturing
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (defun transform-square-brackets-to-round-ones(string-to-transform)
      "Transforms [ into ( and ] into ), other chars left unchanged."
      (concat
       (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform))
      )

    (defun org-journal-find-location ()
      ;; Open today's journal, but specify a non-nil prefix argument in order to
      ;; inhibit inserting the heading; org-capture will insert the heading.
      (org-journal-new-entry t)
      (unless (eq org-journal-file-type 'daily)
        (org-narrow-to-subtree))
      (goto-char (point-max)))

    (setq org-capture-templates '(("t" "Todo" entry (file "~/Dropbox/org/personal/inbox.org")
                                   (file "~/Dropbox/org/personal/templates/tpl-todo.txt"))
                                  ("n" "Note" entry (file "~/Dropbox/org/personal/inbox.org")
                                   "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
                                  ("j" "Journal entry" plain (function org-journal-find-location)
                                   "** %(format-time-string org-journal-time-format)%^{Title}\n%i%?"
                                   :jump-to-captured t :immediate-finish t)
                                  ("p" "Protocol" entry (file "~/Dropbox/org/personal/inbox.org")
                                   "* %^{Title}\nSource: [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\nCaptured On: %U\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
                                  ("L" "Protocol Link" entry (file "~/Dropbox/org/personal/inbox.org")
                                   "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]] \nCaptured On: %U"))))
#+END_SRC
** Other/package
*** org-babel
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (setq org-babel-load-languages
          '((python . t)
            (clojure . t)
            (js . t)
            (emacs-lisp . t)
            (shell . t)
            (dot . t))))
#+END_SRC

*** org-roam
#+BEGIN_SRC emacs-lisp
(setq org-roam-v2-ack t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-roam-v2-ack t)
  (with-eval-after-load 'org
    (setq org-roam-directory "~/Dropbox/org/zettelkasten")
    (setq org-roam-db-location "~/Dropbox/org/zettelkasten/db/org-roam.db"))
#+END_SRC
*** org-edna
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (org-edna-mode))
#+END_SRC

*** org-protocol
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (require 'org-protocol)
    (add-to-list 'org-modules 'org-protocol))
#+END_SRC
*** org-journal
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (setq org-journal-enable-agenda-integration f)
    (setq org-journal-file-header (concat "#+TITLE: Weekly Journal\n"
                                          "#+STARTUP: overview\n")))
#+END_SRC
* Module Setup

This Org file produces a file called =bw-workflow.el= which gets loaded up in =init.el=; export it as a feature so that it can be loaded with =require=.

#+begin_src emacs-lisp

(provide 'bw-workflow)

#+end_src
